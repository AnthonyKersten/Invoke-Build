
<#
.Synopsis
	Creates a VSCode task file based on a build script
	Invoke-Build - Build Automation in PowerShell
	Copyright (c) 2011-2016 Roman Kuzmin

.Description
	This script creates .\.vscode\tasks.json from the specified build script.
	The missing directory .\.vscode is created. The existing file tasks.json
	is replaced with a new. Always change the current location to the VSCode
	workspace directory before invoking the script.

	Do not edit tasks.json directly. Edit the build script instead. When you
	add, remove, rename, or reorder build tasks then regenerate VSCode tasks.

	The default task becomes a so called VSCode build task (Ctrl-Shift-B).
	The default task is "." if it exists, otherwise it is the first task.

	In order to invoke another task from VSCode use Ctrl-P and type "task".
	Then type a task name or select it from the opened list of all tasks.

	Only tasks with certain names are included. They contain alphanumeric
	characters, "_", ".", and "-", with the first character other than "-".

.Parameter BuildFile
		Specifies the build script path, absolute or relative. By default it is
		the standard default script in the current location.
.Parameter InvokeBuild
		Specifies the Invoke-Build.ps1 path, absolute or relative. By default
		it is 'Invoke-Build.ps1', i.e. the script is expected in the path.

.Example
	New-VSCodeTask
	This command binds to the default build script and engine in the path.

.Example
	New-VSCodeTask .\Scripts\Build.ps1 .\Tools\Invoke-Build\Invoke-Build.ps1
	This command binds to the relative build and engine script paths.

.Link
	https://github.com/nightroman/Invoke-Build
#>

[CmdletBinding()]
param(
	[string]$BuildFile,
	[string]$InvokeBuild = 'Invoke-Build.ps1'
)

trap {$PSCmdlet.ThrowTerminatingError($_)}
$ErrorActionPreference = 'Stop'

$all = & $InvokeBuild ?? -File $BuildFile
$dot = if ($all['.']) {'.'} else {$all.Item(0).Name}

if (!(Test-Path .vscode)) {
	$null = mkdir .vscode
}

$out = New-Object System.Text.StringBuilder
function Add-Text($Text) {$null = $out.Append($Text)}
function Add-Line($Text) {$null = $out.AppendLine($Text)}

Add-Line '// Do not edit! This file is generated by New-VSCodeTask.ps1'
Add-Line '// Modify the build script instead and regenerate this file.'
Add-Line '{'
Add-Line '  "version": "0.1.0",'
Add-Line '  "command": "PowerShell.exe",'
Add-Line '  "suppressTaskName": false,'
Add-Line '  "showOutput": "always",'
Add-Line '  "args": ['
Add-Text ('    "-NoProfile", "-ExecutionPolicy", "Bypass", "{0}"' -f ($InvokeBuild.Replace('\', '\\')))
if ($BuildFile) {
	Add-Text (', "-File", "{0}"' -f ($BuildFile.Replace('\', '\\')))
}
Add-Line ''
Add-Line '  ],'
Add-Line '  "tasks": ['

foreach($task in $all.Values) {
	$name = $task.Name
	if ($name -match '[^\w\.\-]|^-') {
		continue
	}
	Add-Line '    {'
	if ($name -eq $dot) {
		Add-Line '      "isBuildCommand": true,'
	}
	Add-Line ('      "taskName": "{0}"' -f $name)
	Add-Line '    },'
}

Add-Line '    {'
Add-Line '      "taskName": "?"'
Add-Line '    }'
Add-Line '  ]'
Add-Text '}'

Set-Content .\.vscode\tasks.json $out.ToString() -Encoding UTF8
