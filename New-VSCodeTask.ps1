
<#
.Synopsis
	Creates VSCode task files based on a build script
	Invoke-Build - Build Automation in PowerShell
	Copyright (c) 2011-2016 Roman Kuzmin

.Description
	The script creates .vscode\tasks.cmd and .vscode\tasks.json. The existing
	files are overridden. Change to the VSCode workspace directory before
	invoking the script.

	Do not edit tasks.json directly. Edit the build script instead. When you
	add, remove, rename, or reorder build tasks then regenerate VSCode tasks.

	The default task becomes a so called VSCode build task (Ctrl-Shift-B).
	The default task is "." if it exists, otherwise it is the first task.

	In order to invoke another task from VSCode use Ctrl-P and type "task".
	Then type a task name or select it from the opened list of all tasks.

	Only tasks with certain names are included. They contain alphanumeric
	characters, "_", ".", and "-", with the first character other than "-".

	In order to invoke some tasks in a console host outside VSCode specify the
	tag #ConsoleHost in a comment preceding the task definition. Note that all
	parent tasks in the task trees get this tag automatically.

.Parameter BuildFile
		Specifies the build script path, absolute or relative. By default it is
		the standard default script in the current location.
.Parameter InvokeBuild
		Specifies the Invoke-Build.ps1 path, absolute or relative. By default
		it is 'Invoke-Build.ps1', i.e. the script is expected in the path.

.Example
	New-VSCodeTask
	This command binds to the default build script and engine in the path.

.Example
	New-VSCodeTask .\Scripts\Build.ps1 .\Tools\Invoke-Build\Invoke-Build.ps1
	This command binds to the relative build and engine script paths.

.Link
	https://github.com/nightroman/Invoke-Build
#>

[CmdletBinding()]
param(
	[string]$BuildFile,
	[string]$InvokeBuild = 'Invoke-Build.ps1'
)

function Add-Text($Text) {$null = $out.Append($Text)}
function Add-Line($Text) {$null = $out.AppendLine($Text)}

$Comments = @{}
function Test-ConsoleHost($Task) {
	$info = $Task.InvocationInfo
	$file = $info.ScriptName
	if (!($data = $Comments[$file])) {
		$Comments[$file] = $data = @{}
		foreach($_ in [System.Management.Automation.PSParser]::Tokenize((Get-Content -LiteralPath $file), [ref]$null)) {
			if ($_.Type -eq 'Comment') {$data[$_.EndLine] = $_.Content}
		}
	}
	for($n = $info.ScriptLineNumber; --$n -ge 1 -and ($c = $data[$n])) {
		if ($c -match '#ConsoleHost\b') {
			return 1
		}
	}
	foreach($j in $Task.Jobs) {if ($j -is [string]) {
		if (Test-ConsoleHost $all[$j]) {
			return 1
		}
	}}
}

### main

trap {$PSCmdlet.ThrowTerminatingError($_)}
$ErrorActionPreference = 'Stop'

$all = & $InvokeBuild ?? -File $BuildFile
$dot = if ($all['.']) {'.'} else {$all.Item(0).Name}

if (!(Test-Path .vscode)) {
	$null = mkdir .vscode
}

### tasks.cmd

$InvokeBuild2 = $InvokeBuild.Replace("'", "''")
$BuildFile2 = if ($BuildFile) {" -File '{0}'" -f $BuildFile.Replace("'", "''")}

$out = @'
@rem Do not edit! This file is generated by New-VSCodeTask.ps1
@echo off
if "%1" == "!" goto start
chcp 65001 > nul
PowerShell.exe -NoProfile -ExecutionPolicy Bypass "& '{0}'{1} %1"
exit
:start
shift
start PowerShell.exe -NoExit -NoProfile -ExecutionPolicy Bypass "& '{0}'{1} %1"
'@ -f $InvokeBuild2, $BuildFile2

Set-Content .\.vscode\tasks.cmd $out

### tasks.json

$out = New-Object System.Text.StringBuilder
Add-Line '// Do not edit! This file is generated by New-VSCodeTask.ps1'
Add-Line '// Modify the build script instead and regenerate this file.'
Add-Line '{'
Add-Line '  "version": "0.1.0",'
Add-Line '  "command": ".\\.vscode\\tasks.cmd",'
Add-Line '  "suppressTaskName": false,'
Add-Line '  "showOutput": "always",'
Add-Line '  "tasks": ['

foreach($task in $all.Values) {
	$name = $task.Name
	if ($name -match '[^\w\.\-]|^-') {
		continue
	}
	Add-Line '    {'
	if ($name -eq $dot) {
		Add-Line '      "isBuildCommand": true,'
	}
	if (Test-ConsoleHost $task) {
		Add-Line '      "suppressTaskName": true,'
		Add-Line ('      "args": ["!", "{0}"],' -f $name)
	}
	Add-Line ('      "taskName": "{0}"' -f $name)
	Add-Line '    },'
}

Add-Line '    {'
Add-Line '      "taskName": "?"'
Add-Line '    }'
Add-Line '  ]'
Add-Text '}'

Set-Content .\.vscode\tasks.json $out.ToString() -Encoding UTF8
